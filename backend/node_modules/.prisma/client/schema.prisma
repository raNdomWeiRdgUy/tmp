// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  password             String
  firstName            String
  lastName             String
  phone                String?
  avatar               String?
  isEmailVerified      Boolean   @default(false)
  emailVerifyToken     String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  isActive             Boolean   @default(true)
  role                 String    @default("CUSTOMER")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  addresses      Address[]
  paymentMethods PaymentMethod[]
  orders         Order[]
  reviews        Review[]
  wishlist       WishlistItem[]
  cart           CartItem[]
  sessions       UserSession[]
  storeReviews   StoreReview[]

  @@map("users")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  type      String   @default("HOME")
  firstName String
  lastName  String
  company   String?
  address1  String
  address2  String?
  city      String
  state     String
  zipCode   String
  country   String   @default("United States")
  phone     String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  userId                String
  type                  String
  last4                 String
  brand                 String
  expiryMonth           Int
  expiryYear            Int
  isDefault             Boolean  @default(false)
  stripePaymentMethodId String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("payment_methods")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Seller {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  description String?
  logo        String?
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
  stores   Store[]

  @@map("sellers")
}

model Store {
  id              String   @id @default(cuid())
  sellerId        String
  name            String
  slug            String   @unique
  description     String?
  category        String // Electronics, Fashion, Grocery, etc.
  address         String
  city            String
  state           String
  zipCode         String
  country         String   @default("United States")
  phone           String?
  email           String?
  website         String?
  logo            String?
  coverImage      String?
  openingHours    String // JSON string for opening hours
  status          String   @default("PENDING") // PENDING, APPROVED, REJECTED, SUSPENDED
  isActive        Boolean  @default(false)
  isPremium       Boolean  @default(false)
  rating          Float    @default(0.0)
  totalReviews    Int      @default(0)
  establishedYear Int?
  licenseNumber   String?
  taxId           String?
  socialMedia     String? // JSON string for social media links
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  seller       Seller           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  products     Product[]
  storeReviews StoreReview[]
  analytics    StoreAnalytics[]

  @@map("stores")
}

model StoreReview {
  id         String   @id @default(cuid())
  storeId    String
  userId     String
  rating     Int
  title      String
  content    String
  images     String // JSON string for image URLs
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([storeId, userId])
  @@map("store_reviews")
}

model StoreAnalytics {
  id        String   @id @default(cuid())
  storeId   String
  date      DateTime
  views     Int      @default(0)
  orders    Int      @default(0)
  revenue   Float    @default(0.0)
  visitors  Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, date])
  @@map("store_analytics")
}

model Product {
  id                String   @id @default(cuid())
  title             String
  slug              String   @unique
  description       String
  price             Float
  originalPrice     Float?
  sku               String   @unique
  brand             String
  weight            Float?
  dimensions        String?
  inStock           Boolean  @default(true)
  stockQuantity     Int      @default(0)
  lowStockThreshold Int      @default(10)
  status            String   @default("ACTIVE")
  categoryId        String
  sellerId          String
  storeId           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  category       Category               @relation(fields: [categoryId], references: [id])
  seller         Seller                 @relation(fields: [sellerId], references: [id])
  store          Store?                 @relation(fields: [storeId], references: [id])
  images         ProductImage[]
  specifications ProductSpecification[]
  features       ProductFeature[]
  variants       ProductVariant[]
  reviews        Review[]
  orderItems     OrderItem[]
  cartItems      CartItem[]
  wishlistItems  WishlistItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductSpecification {
  id        String   @id @default(cuid())
  productId String
  name      String
  value     String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_specifications")
}

model ProductFeature {
  id        String   @id @default(cuid())
  productId String
  feature   String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_features")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  name      String
  options   String
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String
  content    String
  images     String
  isVerified Boolean  @default(false)
  helpful    Int      @default(0)
  notHelpful Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model CartItem {
  id               String   @id @default(cuid())
  userId           String
  productId        String
  quantity         Int
  selectedVariants String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id                    String    @id @default(cuid())
  userId                String
  orderNumber           String    @unique
  status                String    @default("PENDING")
  subtotal              Float
  tax                   Float
  shipping              Float
  total                 Float
  currency              String    @default("USD")
  shippingAddressId     String
  billingAddressId      String
  paymentMethodId       String
  stripePaymentIntentId String?
  trackingNumber        String?
  carrier               String?
  estimatedDelivery     DateTime?
  deliveredAt           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id])
  shippingAddress Address         @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address         @relation("BillingAddress", fields: [billingAddressId], references: [id])
  paymentMethod   PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  items           OrderItem[]
  tracking        OrderTracking[]

  @@map("orders")
}

model OrderItem {
  id               String   @id @default(cuid())
  orderId          String
  productId        String
  quantity         Int
  price            Float
  selectedVariants String?
  createdAt        DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderTracking {
  id          String   @id @default(cuid())
  orderId     String
  status      String
  location    String?
  description String
  createdAt   DateTime @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_tracking")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}
